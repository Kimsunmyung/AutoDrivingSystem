// Generated by gencpp from file cardriver/control_rx.msg
// DO NOT EDIT!


#ifndef CARDRIVER_MESSAGE_CONTROL_RX_H
#define CARDRIVER_MESSAGE_CONTROL_RX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cardriver
{
template <class ContainerAllocator>
struct control_rx_
{
  typedef control_rx_<ContainerAllocator> Type;

  control_rx_()
    : car_connected(0)
    , steer_degree(0)
    , steer_raw(0)
    , steer_limit_left(0)
    , steer_limit_center(0)
    , steer_limit_right(0)
    , rotor_hall(0)
    , rotor_hall_l(0)
    , rotor_hall_r(0)
    , voltage(0)
    , current_charging(0)
    , current_discharging(0)
    , drv_temperature(0)
    , car_vector(0)
    , car_lamp(0)
    , car_signal(0)
    , car_solidbrk(0)
    , embed_custom_a(0)
    , embed_custom_b(0)  {
    }
  control_rx_(const ContainerAllocator& _alloc)
    : car_connected(0)
    , steer_degree(0)
    , steer_raw(0)
    , steer_limit_left(0)
    , steer_limit_center(0)
    , steer_limit_right(0)
    , rotor_hall(0)
    , rotor_hall_l(0)
    , rotor_hall_r(0)
    , voltage(0)
    , current_charging(0)
    , current_discharging(0)
    , drv_temperature(0)
    , car_vector(0)
    , car_lamp(0)
    , car_signal(0)
    , car_solidbrk(0)
    , embed_custom_a(0)
    , embed_custom_b(0)  {
  (void)_alloc;
    }



   typedef int32_t _car_connected_type;
  _car_connected_type car_connected;

   typedef int32_t _steer_degree_type;
  _steer_degree_type steer_degree;

   typedef int32_t _steer_raw_type;
  _steer_raw_type steer_raw;

   typedef int32_t _steer_limit_left_type;
  _steer_limit_left_type steer_limit_left;

   typedef int32_t _steer_limit_center_type;
  _steer_limit_center_type steer_limit_center;

   typedef int32_t _steer_limit_right_type;
  _steer_limit_right_type steer_limit_right;

   typedef int32_t _rotor_hall_type;
  _rotor_hall_type rotor_hall;

   typedef int32_t _rotor_hall_l_type;
  _rotor_hall_l_type rotor_hall_l;

   typedef int32_t _rotor_hall_r_type;
  _rotor_hall_r_type rotor_hall_r;

   typedef int32_t _voltage_type;
  _voltage_type voltage;

   typedef int32_t _current_charging_type;
  _current_charging_type current_charging;

   typedef int32_t _current_discharging_type;
  _current_discharging_type current_discharging;

   typedef int32_t _drv_temperature_type;
  _drv_temperature_type drv_temperature;

   typedef int32_t _car_vector_type;
  _car_vector_type car_vector;

   typedef int32_t _car_lamp_type;
  _car_lamp_type car_lamp;

   typedef int32_t _car_signal_type;
  _car_signal_type car_signal;

   typedef int32_t _car_solidbrk_type;
  _car_solidbrk_type car_solidbrk;

   typedef int32_t _embed_custom_a_type;
  _embed_custom_a_type embed_custom_a;

   typedef int32_t _embed_custom_b_type;
  _embed_custom_b_type embed_custom_b;





  typedef boost::shared_ptr< ::cardriver::control_rx_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cardriver::control_rx_<ContainerAllocator> const> ConstPtr;

}; // struct control_rx_

typedef ::cardriver::control_rx_<std::allocator<void> > control_rx;

typedef boost::shared_ptr< ::cardriver::control_rx > control_rxPtr;
typedef boost::shared_ptr< ::cardriver::control_rx const> control_rxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cardriver::control_rx_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cardriver::control_rx_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cardriver::control_rx_<ContainerAllocator1> & lhs, const ::cardriver::control_rx_<ContainerAllocator2> & rhs)
{
  return lhs.car_connected == rhs.car_connected &&
    lhs.steer_degree == rhs.steer_degree &&
    lhs.steer_raw == rhs.steer_raw &&
    lhs.steer_limit_left == rhs.steer_limit_left &&
    lhs.steer_limit_center == rhs.steer_limit_center &&
    lhs.steer_limit_right == rhs.steer_limit_right &&
    lhs.rotor_hall == rhs.rotor_hall &&
    lhs.rotor_hall_l == rhs.rotor_hall_l &&
    lhs.rotor_hall_r == rhs.rotor_hall_r &&
    lhs.voltage == rhs.voltage &&
    lhs.current_charging == rhs.current_charging &&
    lhs.current_discharging == rhs.current_discharging &&
    lhs.drv_temperature == rhs.drv_temperature &&
    lhs.car_vector == rhs.car_vector &&
    lhs.car_lamp == rhs.car_lamp &&
    lhs.car_signal == rhs.car_signal &&
    lhs.car_solidbrk == rhs.car_solidbrk &&
    lhs.embed_custom_a == rhs.embed_custom_a &&
    lhs.embed_custom_b == rhs.embed_custom_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cardriver::control_rx_<ContainerAllocator1> & lhs, const ::cardriver::control_rx_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cardriver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cardriver::control_rx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cardriver::control_rx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cardriver::control_rx_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cardriver::control_rx_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cardriver::control_rx_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cardriver::control_rx_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cardriver::control_rx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0da4322d997508756a375365d6879e43";
  }

  static const char* value(const ::cardriver::control_rx_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0da4322d99750875ULL;
  static const uint64_t static_value2 = 0x6a375365d6879e43ULL;
};

template<class ContainerAllocator>
struct DataType< ::cardriver::control_rx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cardriver/control_rx";
  }

  static const char* value(const ::cardriver::control_rx_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cardriver::control_rx_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 car_connected\n"
"int32 steer_degree\n"
"int32 steer_raw\n"
"int32 steer_limit_left\n"
"int32 steer_limit_center\n"
"int32 steer_limit_right\n"
"int32 rotor_hall\n"
"int32 rotor_hall_l\n"
"int32 rotor_hall_r\n"
"int32 voltage\n"
"int32 current_charging\n"
"int32 current_discharging\n"
"int32 drv_temperature\n"
"int32 car_vector\n"
"int32 car_lamp\n"
"int32 car_signal\n"
"int32 car_solidbrk\n"
"int32 embed_custom_a\n"
"int32 embed_custom_b\n"
;
  }

  static const char* value(const ::cardriver::control_rx_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cardriver::control_rx_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.car_connected);
      stream.next(m.steer_degree);
      stream.next(m.steer_raw);
      stream.next(m.steer_limit_left);
      stream.next(m.steer_limit_center);
      stream.next(m.steer_limit_right);
      stream.next(m.rotor_hall);
      stream.next(m.rotor_hall_l);
      stream.next(m.rotor_hall_r);
      stream.next(m.voltage);
      stream.next(m.current_charging);
      stream.next(m.current_discharging);
      stream.next(m.drv_temperature);
      stream.next(m.car_vector);
      stream.next(m.car_lamp);
      stream.next(m.car_signal);
      stream.next(m.car_solidbrk);
      stream.next(m.embed_custom_a);
      stream.next(m.embed_custom_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_rx_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cardriver::control_rx_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cardriver::control_rx_<ContainerAllocator>& v)
  {
    s << indent << "car_connected: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_connected);
    s << indent << "steer_degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_degree);
    s << indent << "steer_raw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_raw);
    s << indent << "steer_limit_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_limit_left);
    s << indent << "steer_limit_center: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_limit_center);
    s << indent << "steer_limit_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steer_limit_right);
    s << indent << "rotor_hall: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rotor_hall);
    s << indent << "rotor_hall_l: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rotor_hall_l);
    s << indent << "rotor_hall_r: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rotor_hall_r);
    s << indent << "voltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "current_charging: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_charging);
    s << indent << "current_discharging: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_discharging);
    s << indent << "drv_temperature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drv_temperature);
    s << indent << "car_vector: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_vector);
    s << indent << "car_lamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_lamp);
    s << indent << "car_signal: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_signal);
    s << indent << "car_solidbrk: ";
    Printer<int32_t>::stream(s, indent + "  ", v.car_solidbrk);
    s << indent << "embed_custom_a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.embed_custom_a);
    s << indent << "embed_custom_b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.embed_custom_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARDRIVER_MESSAGE_CONTROL_RX_H
