// Generated by gencpp from file gps_c94_m8p/gps_data.msg
// DO NOT EDIT!


#ifndef GPS_C94_M8P_MESSAGE_GPS_DATA_H
#define GPS_C94_M8P_MESSAGE_GPS_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gps_c94_m8p
{
template <class ContainerAllocator>
struct gps_data_
{
  typedef gps_data_<ContainerAllocator> Type;

  gps_data_()
    : getTime()
    , fixedstate(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_x(0.0)
    , utm_y(0.0)
    , heading_rad(0.0)
    , heading_pi(0.0)
    , heading_degrees(0.0)
    , position_error(0.0)  {
    }
  gps_data_(const ContainerAllocator& _alloc)
    : getTime(_alloc)
    , fixedstate(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , utm_x(0.0)
    , utm_y(0.0)
    , heading_rad(0.0)
    , heading_pi(0.0)
    , heading_degrees(0.0)
    , position_error(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _getTime_type;
  _getTime_type getTime;

   typedef int32_t _fixedstate_type;
  _fixedstate_type fixedstate;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _utm_x_type;
  _utm_x_type utm_x;

   typedef double _utm_y_type;
  _utm_y_type utm_y;

   typedef double _heading_rad_type;
  _heading_rad_type heading_rad;

   typedef double _heading_pi_type;
  _heading_pi_type heading_pi;

   typedef double _heading_degrees_type;
  _heading_degrees_type heading_degrees;

   typedef double _position_error_type;
  _position_error_type position_error;





  typedef boost::shared_ptr< ::gps_c94_m8p::gps_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_c94_m8p::gps_data_<ContainerAllocator> const> ConstPtr;

}; // struct gps_data_

typedef ::gps_c94_m8p::gps_data_<std::allocator<void> > gps_data;

typedef boost::shared_ptr< ::gps_c94_m8p::gps_data > gps_dataPtr;
typedef boost::shared_ptr< ::gps_c94_m8p::gps_data const> gps_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_c94_m8p::gps_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_c94_m8p::gps_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps_c94_m8p::gps_data_<ContainerAllocator1> & lhs, const ::gps_c94_m8p::gps_data_<ContainerAllocator2> & rhs)
{
  return lhs.getTime == rhs.getTime &&
    lhs.fixedstate == rhs.fixedstate &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.utm_x == rhs.utm_x &&
    lhs.utm_y == rhs.utm_y &&
    lhs.heading_rad == rhs.heading_rad &&
    lhs.heading_pi == rhs.heading_pi &&
    lhs.heading_degrees == rhs.heading_degrees &&
    lhs.position_error == rhs.position_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps_c94_m8p::gps_data_<ContainerAllocator1> & lhs, const ::gps_c94_m8p::gps_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps_c94_m8p

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_c94_m8p::gps_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_c94_m8p::gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_c94_m8p::gps_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e79e5fcae5f58ad42f8ae61b301f630";
  }

  static const char* value(const ::gps_c94_m8p::gps_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e79e5fcae5f58adULL;
  static const uint64_t static_value2 = 0x42f8ae61b301f630ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_c94_m8p/gps_data";
  }

  static const char* value(const ::gps_c94_m8p::gps_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string getTime\n"
"\n"
"int32 fixedstate\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 utm_x\n"
"float64 utm_y\n"
"\n"
"float64 heading_rad\n"
"float64 heading_pi\n"
"float64 heading_degrees\n"
"\n"
"float64 position_error\n"
;
  }

  static const char* value(const ::gps_c94_m8p::gps_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.getTime);
      stream.next(m.fixedstate);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.utm_x);
      stream.next(m.utm_y);
      stream.next(m.heading_rad);
      stream.next(m.heading_pi);
      stream.next(m.heading_degrees);
      stream.next(m.position_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_c94_m8p::gps_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_c94_m8p::gps_data_<ContainerAllocator>& v)
  {
    s << indent << "getTime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.getTime);
    s << indent << "fixedstate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fixedstate);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "utm_x: ";
    Printer<double>::stream(s, indent + "  ", v.utm_x);
    s << indent << "utm_y: ";
    Printer<double>::stream(s, indent + "  ", v.utm_y);
    s << indent << "heading_rad: ";
    Printer<double>::stream(s, indent + "  ", v.heading_rad);
    s << indent << "heading_pi: ";
    Printer<double>::stream(s, indent + "  ", v.heading_pi);
    s << indent << "heading_degrees: ";
    Printer<double>::stream(s, indent + "  ", v.heading_degrees);
    s << indent << "position_error: ";
    Printer<double>::stream(s, indent + "  ", v.position_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_C94_M8P_MESSAGE_GPS_DATA_H
