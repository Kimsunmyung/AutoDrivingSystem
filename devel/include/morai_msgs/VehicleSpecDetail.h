// Generated by gencpp from file morai_msgs/VehicleSpecDetail.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_VEHICLESPECDETAIL_H
#define MORAI_MSGS_MESSAGE_VEHICLESPECDETAIL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct VehicleSpecDetail_
{
  typedef VehicleSpecDetail_<ContainerAllocator> Type;

  VehicleSpecDetail_()
    : header()
    , vehicle_name()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , wheelbase(0.0)
    , front_overhang(0.0)
    , rear_overhang(0.0)  {
    }
  VehicleSpecDetail_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicle_name(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , wheelbase(0.0)
    , front_overhang(0.0)
    , rear_overhang(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicle_name_type;
  _vehicle_name_type vehicle_name;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _wheelbase_type;
  _wheelbase_type wheelbase;

   typedef float _front_overhang_type;
  _front_overhang_type front_overhang;

   typedef float _rear_overhang_type;
  _rear_overhang_type rear_overhang;





  typedef boost::shared_ptr< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleSpecDetail_

typedef ::morai_msgs::VehicleSpecDetail_<std::allocator<void> > VehicleSpecDetail;

typedef boost::shared_ptr< ::morai_msgs::VehicleSpecDetail > VehicleSpecDetailPtr;
typedef boost::shared_ptr< ::morai_msgs::VehicleSpecDetail const> VehicleSpecDetailConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator1> & lhs, const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vehicle_name == rhs.vehicle_name &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.wheelbase == rhs.wheelbase &&
    lhs.front_overhang == rhs.front_overhang &&
    lhs.rear_overhang == rhs.rear_overhang;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator1> & lhs, const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c068a372b804d7e798ef8a7c1b0cd3e3";
  }

  static const char* value(const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc068a372b804d7e7ULL;
  static const uint64_t static_value2 = 0x98ef8a7c1b0cd3e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/VehicleSpecDetail";
  }

  static const char* value(const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# frame and time stamp\n"
"Header header\n"
"\n"
"# vehicle name\n"
"string vehicle_name\n"
"\n"
"# vehicle spec\n"
"float32 length\n"
"float32 width\n"
"float32 height\n"
"\n"
"float32 wheelbase\n"
"float32 front_overhang\n"
"float32 rear_overhang\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicle_name);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.wheelbase);
      stream.next(m.front_overhang);
      stream.next(m.rear_overhang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleSpecDetail_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::VehicleSpecDetail_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::VehicleSpecDetail_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicle_name);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "wheelbase: ";
    Printer<float>::stream(s, indent + "  ", v.wheelbase);
    s << indent << "front_overhang: ";
    Printer<float>::stream(s, indent + "  ", v.front_overhang);
    s << indent << "rear_overhang: ";
    Printer<float>::stream(s, indent + "  ", v.rear_overhang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_VEHICLESPECDETAIL_H
