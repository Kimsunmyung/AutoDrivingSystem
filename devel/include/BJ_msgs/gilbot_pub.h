// Generated by gencpp from file BJ_msgs/gilbot_pub.msg
// DO NOT EDIT!


#ifndef BJ_MSGS_MESSAGE_GILBOT_PUB_H
#define BJ_MSGS_MESSAGE_GILBOT_PUB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BJ_msgs
{
template <class ContainerAllocator>
struct gilbot_pub_
{
  typedef gilbot_pub_<ContainerAllocator> Type;

  gilbot_pub_()
    : steer(0.0)
    , velocity(0.0)  {
    }
  gilbot_pub_(const ContainerAllocator& _alloc)
    : steer(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef double _steer_type;
  _steer_type steer;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::BJ_msgs::gilbot_pub_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BJ_msgs::gilbot_pub_<ContainerAllocator> const> ConstPtr;

}; // struct gilbot_pub_

typedef ::BJ_msgs::gilbot_pub_<std::allocator<void> > gilbot_pub;

typedef boost::shared_ptr< ::BJ_msgs::gilbot_pub > gilbot_pubPtr;
typedef boost::shared_ptr< ::BJ_msgs::gilbot_pub const> gilbot_pubConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BJ_msgs::gilbot_pub_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::BJ_msgs::gilbot_pub_<ContainerAllocator1> & lhs, const ::BJ_msgs::gilbot_pub_<ContainerAllocator2> & rhs)
{
  return lhs.steer == rhs.steer &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::BJ_msgs::gilbot_pub_<ContainerAllocator1> & lhs, const ::BJ_msgs::gilbot_pub_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace BJ_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BJ_msgs::gilbot_pub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BJ_msgs::gilbot_pub_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BJ_msgs::gilbot_pub_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1858a7b645a20933b4c523a3bd53310d";
  }

  static const char* value(const ::BJ_msgs::gilbot_pub_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1858a7b645a20933ULL;
  static const uint64_t static_value2 = 0xb4c523a3bd53310dULL;
};

template<class ContainerAllocator>
struct DataType< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BJ_msgs/gilbot_pub";
  }

  static const char* value(const ::BJ_msgs::gilbot_pub_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 steer\n"
"float64 velocity\n"
;
  }

  static const char* value(const ::BJ_msgs::gilbot_pub_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gilbot_pub_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BJ_msgs::gilbot_pub_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BJ_msgs::gilbot_pub_<ContainerAllocator>& v)
  {
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BJ_MSGS_MESSAGE_GILBOT_PUB_H
