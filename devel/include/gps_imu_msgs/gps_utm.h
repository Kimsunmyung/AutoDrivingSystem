// Generated by gencpp from file gps_imu_msgs/gps_utm.msg
// DO NOT EDIT!


#ifndef GPS_IMU_MSGS_MESSAGE_GPS_UTM_H
#define GPS_IMU_MSGS_MESSAGE_GPS_UTM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gps_imu_msgs
{
template <class ContainerAllocator>
struct gps_utm_
{
  typedef gps_utm_<ContainerAllocator> Type;

  gps_utm_()
    : easting(0.0)
    , northing(0.0)
    , covariance()  {
      covariance.assign(0.0);
  }
  gps_utm_(const ContainerAllocator& _alloc)
    : easting(0.0)
    , northing(0.0)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef double _easting_type;
  _easting_type easting;

   typedef double _northing_type;
  _northing_type northing;

   typedef boost::array<double, 3>  _covariance_type;
  _covariance_type covariance;





  typedef boost::shared_ptr< ::gps_imu_msgs::gps_utm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gps_imu_msgs::gps_utm_<ContainerAllocator> const> ConstPtr;

}; // struct gps_utm_

typedef ::gps_imu_msgs::gps_utm_<std::allocator<void> > gps_utm;

typedef boost::shared_ptr< ::gps_imu_msgs::gps_utm > gps_utmPtr;
typedef boost::shared_ptr< ::gps_imu_msgs::gps_utm const> gps_utmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gps_imu_msgs::gps_utm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gps_imu_msgs::gps_utm_<ContainerAllocator1> & lhs, const ::gps_imu_msgs::gps_utm_<ContainerAllocator2> & rhs)
{
  return lhs.easting == rhs.easting &&
    lhs.northing == rhs.northing &&
    lhs.covariance == rhs.covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gps_imu_msgs::gps_utm_<ContainerAllocator1> & lhs, const ::gps_imu_msgs::gps_utm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gps_imu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gps_imu_msgs::gps_utm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gps_imu_msgs::gps_utm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gps_imu_msgs::gps_utm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9cec6c34a96ba0d56b1ca9b5d5580d06";
  }

  static const char* value(const ::gps_imu_msgs::gps_utm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9cec6c34a96ba0d5ULL;
  static const uint64_t static_value2 = 0x6b1ca9b5d5580d06ULL;
};

template<class ContainerAllocator>
struct DataType< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gps_imu_msgs/gps_utm";
  }

  static const char* value(const ::gps_imu_msgs::gps_utm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 easting\n"
"float64 northing\n"
"float64[3] covariance\n"
;
  }

  static const char* value(const ::gps_imu_msgs::gps_utm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.easting);
      stream.next(m.northing);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_utm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gps_imu_msgs::gps_utm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gps_imu_msgs::gps_utm_<ContainerAllocator>& v)
  {
    s << indent << "easting: ";
    Printer<double>::stream(s, indent + "  ", v.easting);
    s << indent << "northing: ";
    Printer<double>::stream(s, indent + "  ", v.northing);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPS_IMU_MSGS_MESSAGE_GPS_UTM_H
