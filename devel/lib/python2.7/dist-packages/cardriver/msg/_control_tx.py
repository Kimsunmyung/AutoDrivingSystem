# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cardriver/control_tx.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_tx(genpy.Message):
  _md5sum = "7ba485599b2b943484c8d738d06c7fb7"
  _type = "cardriver/control_tx"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 aimode
int32 drive_vector
int32 drive_throttle
int32 steer_degree
int32 steer_raw
int32 signal
int32 lamp
int32 horn
int32 embed_custom_a
int32 embed_custom_b"""
  __slots__ = ['aimode','drive_vector','drive_throttle','steer_degree','steer_raw','signal','lamp','horn','embed_custom_a','embed_custom_b']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aimode,drive_vector,drive_throttle,steer_degree,steer_raw,signal,lamp,horn,embed_custom_a,embed_custom_b

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_tx, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.aimode is None:
        self.aimode = 0
      if self.drive_vector is None:
        self.drive_vector = 0
      if self.drive_throttle is None:
        self.drive_throttle = 0
      if self.steer_degree is None:
        self.steer_degree = 0
      if self.steer_raw is None:
        self.steer_raw = 0
      if self.signal is None:
        self.signal = 0
      if self.lamp is None:
        self.lamp = 0
      if self.horn is None:
        self.horn = 0
      if self.embed_custom_a is None:
        self.embed_custom_a = 0
      if self.embed_custom_b is None:
        self.embed_custom_b = 0
    else:
      self.aimode = 0
      self.drive_vector = 0
      self.drive_throttle = 0
      self.steer_degree = 0
      self.steer_raw = 0
      self.signal = 0
      self.lamp = 0
      self.horn = 0
      self.embed_custom_a = 0
      self.embed_custom_b = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10i().pack(_x.aimode, _x.drive_vector, _x.drive_throttle, _x.steer_degree, _x.steer_raw, _x.signal, _x.lamp, _x.horn, _x.embed_custom_a, _x.embed_custom_b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.aimode, _x.drive_vector, _x.drive_throttle, _x.steer_degree, _x.steer_raw, _x.signal, _x.lamp, _x.horn, _x.embed_custom_a, _x.embed_custom_b,) = _get_struct_10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10i().pack(_x.aimode, _x.drive_vector, _x.drive_throttle, _x.steer_degree, _x.steer_raw, _x.signal, _x.lamp, _x.horn, _x.embed_custom_a, _x.embed_custom_b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.aimode, _x.drive_vector, _x.drive_throttle, _x.steer_degree, _x.steer_raw, _x.signal, _x.lamp, _x.horn, _x.embed_custom_a, _x.embed_custom_b,) = _get_struct_10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10i = None
def _get_struct_10i():
    global _struct_10i
    if _struct_10i is None:
        _struct_10i = struct.Struct("<10i")
    return _struct_10i
